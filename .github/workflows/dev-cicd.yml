name: Deploy Foreigner (Dev via Docker Compose)

on:
  push:
    branches: [ dev ]

concurrency:
  group: deploy-foreigner-dev
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Preflight â€” validate required secrets
        run: |
          test -n "${{ secrets.DOCKERHUB_USERNAME }}" || (echo "DOCKERHUB_USERNAME is empty" && exit 1)
          test -n "${{ secrets.DOCKERHUB_TOKEN }}"     || (echo "DOCKERHUB_TOKEN is empty" && exit 1)
          test -n "${{ secrets.DEV_HOST }}"            || (echo "DEV_HOST is empty" && exit 1)
          test -n "${{ secrets.DEV_USER }}"            || (echo "DEV_USER is empty" && exit 1)
          test -n "${{ secrets.DEV_SSH_KEY }}"         || (echo "DEV_SSH_KEY is empty" && exit 1)
          test -n "${{ secrets.DB_NAME }}"             || (echo "DB_NAME is empty" && exit 1)
          test -n "${{ secrets.DB_USER }}"             || (echo "DB_USER is empty" && exit 1)
          test -n "${{ secrets.DB_PASSWORD }}"         || (echo "DB_PASSWORD is empty" && exit 1)
          test -n "${{ secrets.JWT_SECRET }}"          || (echo "JWT_SECRET is empty" && exit 1)
          echo "All required secrets are set."

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker Image (uses repo Dockerfile)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/foreigner:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/foreigner:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/foreigner:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/foreigner:buildcache,mode=max

      - name: SSH Deploy on NCP Dev Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            set -euo pipefail
            command -v docker >/dev/null || (echo "docker not found" && exit 1)
            docker compose version || (echo "docker compose not found" && exit 1)

            mkdir -p ~/foreigner
            cd ~/foreigner

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin            
            
            IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/foreigner:${{ github.sha }}"
            
            cat > .env <<EOF
            POSTGRES_DB=${{ secrets.DB_NAME }}
            POSTGRES_USER=${{ secrets.DB_USER }}
            POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
            
            SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/${{ secrets.DB_NAME }}
            SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USER }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}
            
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            SPRING_PROFILES_ACTIVE=dev
            SPRING_JPA_HIBERNATE_DDL_AUTO=update
            JAVA_TOOL_OPTIONS=-Xms256m -Xmx512m
            
            IMAGE=${IMAGE}
            
            ANDROID_CLIENT_ID=${{ secrets.ANDROID_CLIENT_ID }}
            ANDROID_REDIRECT_URI=${{ secrets.ANDROID_REDIRECT_URI }}
            IOS_CLIENT_ID=${{ secrets.IOS_CLIENT_ID }}
            IOS_REDIRECT_URI=${{ secrets.IOS_REDIRECT_URI }}
            WEB_CLIENT_ID=${{ secrets.WEB_CLIENT_ID }}
            WEB_CLIENT_SECRET=${{ secrets.WEB_CLIENT_SECRET }}
            WEB_REDIRECT_URI=${{ secrets.WEB_REDIRECT_URI }}
            EOF
            
            chmod 600 .env || true
            echo "Using IMAGE=${IMAGE}"
            
            docker compose pull
            docker compose up -d --remove-orphans
            
            docker compose ps
            docker compose logs --since=5m || true
            docker image prune -f || true
